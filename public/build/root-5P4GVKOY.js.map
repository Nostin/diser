{
  "version": 3,
  "sources": ["browser-route-module:/Users/seathomp1/Documents/diser/app/root.tsx?browser", "../../app/root.tsx"],
  "sourcesContent": ["export { default, meta } from \"/Users/seathomp1/Documents/diser/app/root.tsx\";", "import type { MetaFunction } from \"@remix-run/node\";\nimport {\n  Links,\n  LiveReload,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration,\n  useLoaderData,\n} from \"@remix-run/react\";\nimport { Wrapper, Status } from \"@googlemaps/react-wrapper\";\n\nimport { useEffect, useRef, useState, ReactElement, Children, isValidElement, cloneElement } from \"react\";\nimport { MarkerClusterer } from \"@googlemaps/markerclusterer\";\n\nexport async function loader() {\n  return {\n    REACT_GOOGLE_MAPS_API_KEY: process.env.REACT_GOOGLE_MAPS_API_KEY,\n  };\n}\n\nexport const meta: MetaFunction = () => ({\n  charset: \"utf-8\",\n  title: \"Diser \",\n  viewport: \"width=device-width,initial-scale=1\",\n});\n\nconst renderMappy = (status: Status): ReactElement => {\n  if (status === Status.FAILURE) return <p>Error</p>;\n  return <p>spinner</p>;\n};\n\nexport const MyMapComponent = ({ children }: { children: any }) => {\n  const ref = useRef<HTMLDivElement>(null);\n  const [map, setMap] = useState<google.maps.Map>();\n  \n  useEffect(() => {\n    if (ref.current && !map) {\n      var latlng = new google.maps.LatLng(-34.397, 150.644);\n      setMap(new window.google.maps.Map(ref.current, { zoom: 8, center: latlng }));\n    }\n  }, [ref, map]);\n\n\n  const labels = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  const locations = [\n    { lat: -31.56391, lng: 147.154312 },\n    { lat: -33.718234, lng: 150.363181 },\n    { lat: -33.727111, lng: 150.371124 },\n    { lat: -33.848588, lng: 151.209834 },\n    { lat: -33.851702, lng: 151.216968 },\n    { lat: -34.671264, lng: 150.863657 },\n    { lat: -35.304724, lng: 148.662905 },\n    { lat: -36.817685, lng: 175.699196 },\n    { lat: -36.828611, lng: 175.790222 },\n    { lat: -37.75, lng: 145.116667 }];\n\n  const markers = locations.map((position, i) => {\n    const label = labels[i % labels.length];\n    const marker = new google.maps.Marker({\n      position,\n      label,\n    });\n\n    // markers can only be keyboard focusable when they have click listeners\n    // open info window when marker is clicked\n    /*\n    marker.addListener(\"click\", () => {\n      infoWindow.setContent(label);\n      infoWindow.open(map, marker);\n    });\n    */\n    marker.addListener(\"click\", () => {\n      console.log('pin clicked')\n    });\n\n    return marker;\n  });\n  new MarkerClusterer({ markers, map });\n\n  return (\n    <>\n      <div ref={ref} style={{ width: 800, height: 600 }} />\n      {Children.map(children, (child) => {\n        if (isValidElement(child)) {\n          // set the map prop on the child component\n          return cloneElement(child, { map });\n        }\n      })}\n    </>\n  );\n}\n\nconst Marker: React.FC<google.maps.MarkerOptions> = (options) => {\n  const [marker, setMarker] = useState<google.maps.Marker>();\n\n  useEffect(() => {\n    if (!marker) {\n      setMarker(new google.maps.Marker());\n    }\n\n    // remove marker from map on unmount\n    return () => {\n      if (marker) {\n        marker.setMap(null);\n      }\n    };\n  }, [marker]);\n\n  useEffect(() => {\n    if (marker) {\n      const latlng = new google.maps.LatLng(-34.397, 150.644);\n      let floptions = {}\n      floptions = Object.assign(floptions, options, { position: latlng })\n      marker.setOptions(floptions);\n    }\n  }, [marker, options]);\n\n  return null;\n};\n\nconst Clusters: React.FC<google.maps.MarkerOptions> = (options) => {\n  const [marker, setMarker] = useState<google.maps.Marker>();\n\n  const locations = [\n    { lat: -31.56391, lng: 147.154312 },\n    { lat: -33.718234, lng: 150.363181 },\n    { lat: -33.727111, lng: 150.371124 },\n    { lat: -33.848588, lng: 151.209834 },\n    { lat: -33.851702, lng: 151.216968 },\n    { lat: -34.671264, lng: 150.863657 },\n    { lat: -35.304724, lng: 148.662905 },\n    { lat: -36.817685, lng: 175.699196 },\n    { lat: -36.828611, lng: 175.790222 },\n    { lat: -37.75, lng: 145.116667 }];\n\n  const labels = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\n  // Add some markers to the map.\n  const markers = locations.map((position, i) => {\n    const label = labels[i % labels.length];\n    const marker = new google.maps.Marker({\n      position,\n      label,\n    });\n\n    // markers can only be keyboard focusable when they have click listeners\n    // open info window when marker is clicked\n    /*\n    marker.addListener(\"click\", () => {\n      infoWindow.setContent(label);\n      infoWindow.open(map, marker);\n    });\n    */\n\n    return marker;\n  });\n\n  // Add a marker clusterer to manage the markers.\n  new MarkerClusterer({ markers, map });\n};\n\nexport default function App() {\n  const envData = useLoaderData();\n\n  return (\n    <html lang=\"en\">\n      <head>\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        <Wrapper apiKey={envData.REACT_GOOGLE_MAPS_API_KEY} render={renderMappy}>\n          <MyMapComponent>\n            <Marker />\n          </MyMapComponent>\n        </Wrapper>\n        <Outlet />\n        <ScrollRestoration />\n        <Scripts />\n        <LiveReload />\n      </body>\n    </html>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAAA;;;ACAA;AAUA,2BAAgC;AAEhC,oBAAkG;AAS3F,IAAM,OAAqB,MAAO;AAAA,EACvC,SAAS;AAAA,EACT,OAAO;AAAA,EACP,UAAU;AAAA;AAGZ,IAAM,cAAc,CAAC,WAAiC;AACpD,MAAI,WAAW,4BAAO;AAAS,WAAO,oCAAC,KAAD,MAAG;AACzC,SAAO,oCAAC,KAAD,MAAG;AAAA;AAGL,IAAM,iBAAiB,CAAC,EAAE,eAAkC;AACjE,QAAM,MAAM,0BAAuB;AACnC,QAAM,CAAC,MAAK,UAAU;AAEtB,+BAAU,MAAM;AACd,QAAI,IAAI,WAAW,CAAC,MAAK;AACvB,UAAI,SAAS,IAAI,OAAO,KAAK,OAAO,SAAS;AAC7C,aAAO,IAAI,OAAO,OAAO,KAAK,IAAI,IAAI,SAAS,EAAE,MAAM,GAAG,QAAQ;AAAA;AAAA,KAEnE,CAAC,KAAK;AAGT,QAAM,SAAS;AACf,QAAM,YAAY;AAAA,IAChB,EAAE,KAAK,WAAW,KAAK;AAAA,IACvB,EAAE,KAAK,YAAY,KAAK;AAAA,IACxB,EAAE,KAAK,YAAY,KAAK;AAAA,IACxB,EAAE,KAAK,YAAY,KAAK;AAAA,IACxB,EAAE,KAAK,YAAY,KAAK;AAAA,IACxB,EAAE,KAAK,YAAY,KAAK;AAAA,IACxB,EAAE,KAAK,YAAY,KAAK;AAAA,IACxB,EAAE,KAAK,YAAY,KAAK;AAAA,IACxB,EAAE,KAAK,YAAY,KAAK;AAAA,IACxB,EAAE,KAAK,QAAQ,KAAK;AAAA;AAEtB,QAAM,UAAU,UAAU,IAAI,CAAC,UAAU,MAAM;AAC7C,UAAM,QAAQ,OAAO,IAAI,OAAO;AAChC,UAAM,SAAS,IAAI,OAAO,KAAK,OAAO;AAAA,MACpC;AAAA,MACA;AAAA;AAWF,WAAO,YAAY,SAAS,MAAM;AAChC,cAAQ,IAAI;AAAA;AAGd,WAAO;AAAA;AAET,MAAI,gBAAgB,EAAE,SAAS;AAE/B,SACE,0DACE,oCAAC,OAAD;AAAA,IAAK;AAAA,IAAU,OAAO,EAAE,OAAO,KAAK,QAAQ;AAAA,MAC3C,uBAAS,IAAI,UAAU,CAAC,UAAU;AACjC,QAAI,kCAAe,QAAQ;AAEzB,aAAO,gCAAa,OAAO,EAAE;AAAA;AAAA;AAAA;AAOvC,IAAM,SAA8C,CAAC,YAAY;AAC/D,QAAM,CAAC,QAAQ,aAAa;AAE5B,+BAAU,MAAM;AACd,QAAI,CAAC,QAAQ;AACX,gBAAU,IAAI,OAAO,KAAK;AAAA;AAI5B,WAAO,MAAM;AACX,UAAI,QAAQ;AACV,eAAO,OAAO;AAAA;AAAA;AAAA,KAGjB,CAAC;AAEJ,+BAAU,MAAM;AACd,QAAI,QAAQ;AACV,YAAM,SAAS,IAAI,OAAO,KAAK,OAAO,SAAS;AAC/C,UAAI,YAAY;AAChB,kBAAY,OAAO,OAAO,WAAW,SAAS,EAAE,UAAU;AAC1D,aAAO,WAAW;AAAA;AAAA,KAEnB,CAAC,QAAQ;AAEZ,SAAO;AAAA;AA4CM,eAAe;AAC5B,QAAM,UAAU;AAEhB,SACE,oCAAC,QAAD;AAAA,IAAM,MAAK;AAAA,KACT,oCAAC,QAAD,MACE,oCAAC,MAAD,OACA,oCAAC,OAAD,QAEF,oCAAC,QAAD,MACE,oCAAC,8BAAD;AAAA,IAAS,QAAQ,QAAQ;AAAA,IAA2B,QAAQ;AAAA,KAC1D,oCAAC,gBAAD,MACE,oCAAC,QAAD,SAGJ,oCAAC,QAAD,OACA,oCAAC,mBAAD,OACA,oCAAC,SAAD,OACA,oCAAC,YAAD;AAAA;",
  "names": []
}
